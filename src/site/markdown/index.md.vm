Quick Start
===========

"Unit of work" is an active component that is receiving control
every minute and does something with your project on your behalf.
A simple scenario would be to monitor your Git `master` branch
and run automated build every time a new commit appears there
(aka **continuous integration**).

Let's create a unit of work for the continuous integration mechanism,
with the following Specification:

```
urn:github:526301:git-on-commit(
  "https://github.com/jcabi/jcabi.git",
  "mvn test -e -Pci --settings /home/ubuntu/settings.xml",
  ["me@example.com"],
  "m1.small",
  "example",
  "super-secret",
  {
    "settings.xml": """
    <settings>
      <profiles>
        <profile>
          <id>ci</id>
          <properties>
            <my.secret>hello, everybody!</my.secret>
          </properties>
        </profile>
      </profiles>
    </settings>
    """
  }
)
```

Save it and in a few minutes you will see its first result.

The specification defines how to construct an object that should
receive control
(see [full syntax description](./rultor-spi/apidocs-${project.version}/com/rultor/spi/Spec.html)).
In this example, the object will be constructed from
a template defined by user `urn:github:526301` with `git-on-commit` name.
The template requires eight parameters. The first one is the URL
of Git repository, as a Java string:

```
"https://github.com/jcabi/jcabi.git"
```

The second one is a bash command that will be executed if a new commit
is found in `master` branch of the repo:

```
"mvn test -e -Pci --settings /home/ubuntu/settings.xml"
```

The third one is a list of email addresses that will receive notifications
when build is complete (either with success or failure). In the example,
the list contains just one element, but you can use it with many:

```
["me@example.com", "you@example.com"]
```

The fourth one is an EC2 instance type, which will be used for build
script execution. When a new commit is found in your `master` branch, the
unit will create a new Amazon Web Services EC2 instance, execute your script, and
terminate the instance. Your account will be charged for the price of the
instance. Prices and instance types are listed in
[AWS documention](http://aws.amazon.com/ec2/pricing/).

There is an allowance of $5.00 automatically added to your account every
30 days, if you don't fund it otherwise. Thus, if you have just one continuous
integration unit of work which runs, say three times per working day, using `m1.small`
type of EC2 instance, your total cost will be $3.60 per month. This is less
than the allowance you get automatically from us and you don't need to fund
the account at all.

The fifth and the sixth parameters are access credentials for a Stand, which
is a public showcase of all units in a project (will be discussed a bit later). In
the example, credentials are not valid since you haven't create a stand yet.
Stand name is `example` and authentication key is `super-secret`.

The last parameter is a map of files to be uploaded to the EC2 instance
before running the build script. They will be uploaded into `/home/ubuntu` directory,
which is a home directory of the EC2 user for Ubuntu images.
The map may contain more elements, for example:

```
{
  "secret.txt": "... content of the file ...",
  "settings.xml": """
  <settings/>
  """,
  "file-2.txt": "... another text file ..."
}
```

Triple quotes are used to specify a long text that constitues
more than one line, similar to
[Groovy multi-line strings](http://groovy.codehaus.org/Strings+and+GString).

Stand
-----

Now it's time to create a "stand", where project members will see the
progress of your units. Stand specification is much simplier, for
example this one can be used for a public project:

```
com.rultor.acl.Either(
  [
    com.rultor.acl.OpenView(),
    com.rultor.acl.MD5Keyed("0682f007844a0266990df1b2912f95bc")
  ]
)
```

Instantiated stand specification implements
[`ACL`](./rultor-spi/apidocs-${project.version}/com/rultor/spi/ACL.html) interface,
which decides who is allowed to read your stand and who is allowed to
post into it. Your units of work post into the stand and your project
members read the stand at `http://www.rultor.com/s/example`
(if the name of the stand is `example`).

In this specification we instantiate
[`com.rultor.acl.Either`](./rultor-base/apidocs-${project.version}/com/rultor/acl/Either.html) class with
one argument of its constructor, which is a list of instances of class `ACL`.
As the name implies, the class allows access if any of the encapsulated
ACLs do so.

[`com.rultor.acl.OpenView`](./rultor-base/apidocs-${project.version}/com/rultor/acl/OpenView.html)
allows read access to everybody, which means that page
`http://www.rultor.com/s/example` will be readable in public web and indexable
by Google.

[`com.rultor.acl.MD5Keyed`](./rultor-base/apidocs-${project.version}/com/rultor/acl/MD5Keyed.html)
allows write access only for providers of `super-secret` authentication key.
As you already understood, `0682f007844a0266990df1b2912f95bc` is its MD5 hash.

If you want to close access to your stand, use
[`com.rultor.acl.Prohibited`](./rultor-base/apidocs-${project.version}/com/rultor/acl/Prohibited.html)
without arguments:

```
com.rultor.acl.Either()
```

Continuous Integration of Master Branch
---

In the example above, every new commit made to your Git `master` branch
triggers a build script, which builds the code and validates its
consistency (you should use unit tests, integration tests, and
static analysis as validator instruments).

Template `git-on-commit` provided by user `urn:github:526301` does is in
a smart way. Let's break it down into components.

As you already know, a unit of work receives control every minute.
Technically it's even more interesting. Every minute a unit of work is
instantiated as a Java object, according to its specification and then receives control.
We call this object an Instance. The module that instantiates a unit and
controls instances is called a Conveyer.

When the instance's lifespan comes to end, it looses control and gets destroyed
by Java Virtual Machine. More to this, all instances are stateless immutable
objects, which are not aware about each others existence.
This models gives a lot of benefits in concurrency and traceability. However,
it requires accuracy in configuration.

The first problem that `git-on-commit` template solves is a possibility
of concurrent execution of multiple instances. When a new commit appears
in the Git branch Conveyer creates an instance and let it do its job, which
is building the product. This process may take more than a minute. We don't
want to start a new build until the first one is running. This problem is
solved by `git-on-commit` using semaphores in Amazon SimpleDB. When
using the template you pay for its usage of SimpleDB, but the price is
very small (less than $0.00001 per request).

As you probably already understood, there is no way to "trigger" execution
of a unit. This is where Rultor differs from other continuous integration
systems like Jenkins. A new instance of every unit is created and executed
every minute, 24 hours per day, 7 days per week.
The only way to stop this process is to either delete the unit
or enclose its specification into
[`com.rultor.base.Empty`](./rultor-spi/apidocs-${project.version}/com/rultor/spi/Empty.html):

```
com.rultor.base.Empty(
  urn:github:526301:git-on-commit(
    "https://github.com/jcabi/jcabi.git",
    "mvn test -e -Pci --settings /home/ubuntu/settings.xml",
    ... skipped ...
  )
)
```

In order to detect new commits, `git-on-commit` clones your repository
to a supplementary server and runs `git pull` on every execution (every minute).
In most cases, sensitivy of one minute is not required, that's why `git-on-commit`
ignores four executions out of five.




Release Every New Tag
------

Another popular scenario in almost any software project should be
releasing of the next version. When your next version is stable enough
to reach the market you tag certain commit in your repository and document
it in release notes. You can specify a unit of work in Rultor that will
find such tags and run build script on them.

On Pull Request
-----


